/* Definitions for process server interface
   Copyright (C) 1992,93,94,95,96,97,2001,13,14 Free Software Foundation

This file is part of the GNU Hurd.

The GNU Hurd is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

The GNU Hurd is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the GNU Hurd; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */

subsystem process 24000;

#include <hurd/hurd_types.defs>

/* If any calls are added or deleted, modify process_reply.defs
   and process_request.defs accordingly. */

#ifdef PROCESS_IMPORTS
PROCESS_IMPORTS
#endif

INTR_INTERFACE


/*** Host management ***/

skip;  /* Was proc_sethostid */
skip;  /* Was proc_gethostid */
skip;  /* Was proc_sethostname */
skip;  /* Was proc_gethostname */

/* Get the privileged host port and the device master port.  */
routine proc_getprivports (
	process: process_t;
	out host_priv: host_priv_t;
	out device_master: device_t);

/* Return all the pids of all live processes.  */
routine proc_getallpids (
	process: process_t;
	out pidarray: pidarray_t, dealloc);

/* Set the "standard exec data", used by programs that want predefined
   values for exec.  */
routine proc_setexecdata (
	process: process_t;
	ports: portarray_t;
	ints: intarray_t);

/* Get the standard exec data */
routine proc_getexecdata (
	process: process_t;
	out ports: portarray_t, dealloc;
	out ints: intarray_t, dealloc);

/* Request notification with exec_setexecdata on NOTIFY.  */
routine proc_execdata_notify (
	process: process_t;
	notify: mach_port_send_t);

/* Return a uname structure for the currently running system. */
routine proc_uname (
	process: process_t;
	out uname: utsname_t);

/* Tell the server who we are for inclusion in the uname string. */
routine proc_register_version (
	process: process_t;
	credential: host_priv_t;
	name: string_t;
	release: string_t;
	version: string_t);

/*** Process creation and simple management.  ***/

/* There is a 1-1 relationship between tasks and processes; to create
   a new process, just create a new task and use proc_task2proc. */

/* Change the current authentication of the process.  The user should
   follow this call with a call to auth_user_authenticate.  The
   new_port passed back through the auth server will be
   MACH_PORT_NULL.  */
simpleroutine proc_reauthenticate (
	process: process_t;
	rendezvous2: mach_port_send_t);

/* Declare that a task is a child of the caller.  The task's state
   will then inherit from the caller.  This call can be made only once
   per task. */
routine proc_child (
	process: process_t;
	child: task_t);

/* Atomically change the message port of a process.  */
routine proc_setmsgport (
	process: process_t;
	sreplyport reply_port: sreply_port_t;
	newmsgport: mach_port_t;
	out oldmsgport: mach_port_send_t);

/* Cause a task to take over the pid and all other state from an
   existing task, and kill the old task with task_terminate.  The
   message port will be set to MACH_PORT_NULL.  This is principally
   used for doing exec's with the EXEC_NEWTASK bit set.  The request
   port assigned to NEWTASK does not change.  The new task cannot have
   had proc_child called on its behalf, it cannot have a pgrp, a session,
   a login name set with proc_setlogin, it cannot have called proc_child,
   and it cannot have a message port.  */
/* If this call is made for a process which is no longer alive or
   does not exist, then newtask will be killed (and no error
   is returned). */
routine proc_reassign (
	process: process_t;
	newtask: task_t);

/* Set the owner of the process.  The new owner must be within the
   current authentication of the caller.  If CLEAR is set, then ignore
   OWNER and restore the process to unowned status. */
routine proc_setowner (
	process: process_t;
	owner: uid_t;
	clear: int);

/* Get the process ID and the parent process ID, also find out if we
   are orphaned.  */
routine proc_getpids (
	process: process_t;
	out pid: pid_t;
	out ppid: pid_t;
	out orphaned: int);

/* Set the locations of ARGV and ENVP which will be examined
   by proc_getprocargs and proc_getprocenv.  */
routine proc_set_arg_locations (
	process: process_t;
	argv: vm_address_t;
	envp: vm_address_t);

/* Fetch the locations set by proc_set_arg_locations.  */
routine proc_get_arg_locations (
	process: process_t;
	out argv: vm_address_t;
	out envp: vm_address_t);

/* Fetch the message port of a process */
routine proc_getmsgport (
	process: process_t;
	sreplyport reply_port: sreply_port_t;
	pid: pid_t;
	out msgport: mach_port_send_t);

/* Wait for a child process to exit.  If pid is zero, it waits for any
   child in the same pgrp as the parent.  If pid is -1, it waits for
   any child.  Otherwise, if pid is negative, it waits for any process
   in the specified process group.  If pid is positive, it waits for
   the specified process.  The exit status and resource usage of the
   process are returned in status and rusage respectively.  */
routine proc_wait (
	process: process_t;
	sreplyport reply_port: sreply_port_t;
	pid: pid_t;
	options: int;
	out status: int;
	out sigcode: int;
	out rusage: rusage_t;
	out pid_status: pid_t);

/* Have the process server stop all threads except contthread.  */
routine proc_dostop (
	process: process_t;
	contthread: thread_t);

/* Take over exception messages received on MSGPORT.  Any exception
   messages received will be forwarded to FORWARDPORT.  In addition,
   the thread causing the exception will be aborted (with thread_abort)
   and have its state adjusted (as by thread_set_state).  */
routine proc_handle_exceptions (
	process: process_t;
	msgport: mach_port_move_receive_t;
	forwardport: mach_port_send_t;
	flavor: int;
	new_state: thread_state_t);



/*** Mark bits.  Some of these (exec, traced, eg) modify small pieces 
   of the proc server's behavior; others are purely informational. ***/

/* Mark the process as stopped on a signal. */
routine proc_mark_stop (
	process: process_t;
	signo: int;
	sigcode: int);

/* Mark the process as continued after a stop.  */
routine proc_mark_cont (
	process: process_t);

/* Tell the process server that the process is going away.  If it dies
   without calling this, it will look to the parent like the process
   died with SIGKILL.  This call allows for a cleaner exit.  */
routine proc_mark_exit (
	process: process_t;
	status: int;
	sigcode: int);

/* Inform the process server that the process has completed an exec.  */
routine proc_mark_exec (
	process: process_t);

/* Inform the process server that the process has asked to be traced.
   The only result of this is to change the behavior of wait by the 
   parent slightly.  */
routine proc_mark_traced (
	process: process_t);

/* Inform the process server whether SIGCHLD should be sent for stopped 
   child processes.  */
routine proc_mod_stopchild (
	process: process_t;
	doit: int);


/*** Miscellaneous process information queries. ***/

routine proc_pid2task (
	process: process_t;
	pid: pid_t;
	out task: task_t);

routine proc_task2pid (
	process: process_t;
	task: task_t;
	out pid: pid_t);

/* Return the procserver port for the specified task.  */
routine proc_task2proc (
	process: process_t;
	task: task_t;
	out proc: mach_port_send_t);

routine proc_proc2task (
	process: process_t;
	out task: task_t);

routine proc_pid2proc (
	process: process_t;
	pid: pid_t;
	out proc: mach_port_send_t);

routine proc_getprocinfo (
	process: process_t;
	which: pid_t;
	inout flags: int;
	out procinfo: procinfo_t, dealloc;
	out threadwaits: data_t, dealloc);

routine proc_getprocargs (
	process: process_t;
	which: pid_t;
	out procargs: data_t, dealloc);

routine proc_getprocenv (
	process: process_t;
	which: pid_t;
	out procenv: data_t, dealloc);

/* Create a new login collection.  The pid of PROCESS will be the id
   of the collection.  All the children (and their children, and so forth) of
   PROCESS will automatically join the collection.  If PROCESS dies its
   children (and their children, and so forth) will become part of init's
   process collection.  */
routine proc_make_login_coll (
	process: process_t);

/* Get the process collection ID for the process specified by pid.  */
routine proc_getloginid (
	process: process_t;
	pid: pid_t;
	out login_id: pid_t);

/* Get the pids of all the members of process collection ID. */
routine proc_getloginpids (
	process: process_t;
	id: pid_t;
	out pids: pidarray_t, dealloc);

/* You are not expected to understand this. */
routine proc_setlogin (
	process: process_t;
	logname: string_t);

routine proc_getlogin (
	process: process_t;
	out logname: string_t);



/*** Sessions and process groups.  ***/

/* Create a new session.  The process's pgrp is set to its pid, and
   becomes the session leader.  */
routine proc_setsid (
	process: process_t);

/* Return the pid of a process's session leader.  */
routine proc_getsid (
	process: process_t;
	pid: pid_t;
	out sid: pid_t);

/* Get the pgids of all the members of a session.  */
routine proc_getsessionpgids (
	process: process_t;
	sid: pid_t;
	out pgidset: pidarray_t, dealloc);

/* Get the pids of all the members of a session. */
routine proc_getsessionpids (
	process: process_t;
	sid: pid_t;
	out pidset: pidarray_t, dealloc);

/* Return a "session ID" port for the session of the caller.
   This port is generally only available to members of the session.
   (It has no listener, but is useful for identification purposes.)  */
routine proc_getsidport (
	process: process_t;
	out sessport: mach_port_send_t);

/* Set the process group of a process.  */
routine proc_setpgrp (
	process: process_t;
	pid: pid_t;
	pgrp: pid_t);

/* Get the process group of a process.  */
routine proc_getpgrp (
	process: process_t;
	pid: pid_t;
	out pgrp: pid_t);

/* Get the pids of all the members of a pgrp.  */
routine proc_getpgrppids (
	process: process_t;
	pgrp: pid_t;
	out pidset: pidarray_t, dealloc);


/*** Other miscelleneous info queries ***/

/* Return the controlling TTY used by PID in TTY; opened without read or
   write access. */
routine proc_get_tty (
	calling_process: process_t;
	target_process: pid_t;
	out tty: mach_port_send_t);

/* Return the number of Mach ports used by PID */
routine proc_getnports (
	process: process_t;
	which: pid_t;
	out nports: mach_msg_type_number_t);

/*** Routines related to early server bootstrapping ***/

/* Set the task of process HURD_PID_INIT. Only the startup process
   HURD_PID_STARTUP may use this interface.  */
routine proc_set_init_task (
	process: process_t;
	task: task_t);

/* Inform the process server that the process is important.  */
routine proc_mark_important (
	process: process_t);

/* Query whether the process is important.  */
routine proc_is_important (
	process: process_t;
	out essential: boolean_t);

/* Set the processes start_code and end_code locations.  Any
   executable segments loaded from the ELF binary are in this
   range.  */
routine proc_set_code (
	process: process_t;
	start_code: vm_address_t;
	end_code: vm_address_t);

/* Get the processes start_code and end_code locations.  Any
   executable segments loaded from the ELF binary are in this range.
   If zero is returned for these values, the requested information has
   never been set.  */
routine proc_get_code (
	process: process_t;
	out start_code: vm_address_t;
	out end_code: vm_address_t);

/* Create a new task namespace.  PROCESS claims the responsibility to
   manage all tasks in this namespace.  Any task created in this
   namespace will automatically be declared a child of PROCESS, and a
   `mach_notify_new_task' message is sent to NOTIFY.  If PROCESS dies,
   the proc server will terminate all tasks in the namespace.  */
routine proc_make_task_namespace (
	process: process_t;
	notify: mach_port_send_t);

/* Set the process binary executable path.  */
routine proc_set_exe (
	process: process_t;
	path: string_t);

/* Get the process binary executable path.  */
routine proc_get_exe (
	process: process_t;
	which: pid_t;
	out path: string_t);

/* Set the locations of the executable entry.  */
routine proc_set_entry (
	process: process_t;
	entry: vm_address_t);

/* Fetch the locations of the executable entry.  */
routine proc_get_entry (
	process: process_t;
	out entry: vm_address_t);

/* Wait for a child process to exit.  If pid is zero, it waits for any
   child in the same pgrp as the parent.  If pid is -1, it waits for
   any child.  Otherwise, if pid is negative, it waits for any process
   in the specified process group.  If pid is positive, it waits for
   the specified process.  The exit status and resource usage of the
   process are returned in status and rusage respectively.
   options must specify at least one of WEXITED, WSTOPPED, or WCONTINUED.  */
routine proc_waitid (
	process: process_t;
	sreplyport reply_port: sreply_port_t;
	pid: pid_t;
	options: int;
	out status: int;
	out sigcode: int;
	out rusage: rusage_t;
	out pid_status: pid_t);
